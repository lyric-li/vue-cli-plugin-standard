stages:
  - 评审
  - 构建
  - 测试
  - 发布
  - 部署

.node: &node
  cache: &node_cache
    key: $CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
  image: node:alpine
  retry:
    max: 2
    when:
      - stuck_or_timeout_failure

.docker: &docker
  image: docker
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
  retry:
    max: 2
    when:
      - stuck_or_timeout_failure
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  after_script:
    - docker logout
    - docker container prune -f
    - docker image prune -f

.docker-compose: &docker-compose
  stage: 部署
  image:
    entrypoint: [""]
    name: docker/compose:$DOCKERCOMPOSE_VERSION
  variables: &docker-compose_variables
    COMPOSE_PROJECT_NAME: $CI_PROJECT_NAME-$CI_PROJECT_ID
    DOCKER_TLS_VERIFY: 1
  script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker-compose pull -q
    - docker-compose up -d --no-build --remove-orphans
  after_script:
    - docker logout
    - docker container prune -f
    - docker image prune -af
    - docker network prune -f


编码质量评审:
  <<: *node
  stage: 评审
  except:
    - master
  allow_failure: true
  script:
    - npm install
    - npm run lint

构建:
  <<: *node
  stage: 构建
  artifacts:
    name: $CI_COMMIT_SHA
    paths:
      - dist/
  script:
    - "[ -d \"node_modules\" ] || npm install"
    - npm run build

发布docker镜像:
  <<: *docker
  stage: 发布
  only:
    - master
  dependencies:
    - 构建
  script:
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest
    - "[ -n \"$CI_COMMIT_TAG\" ] && docker tag $CI_REGISTRY_IMAGE:latest $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG && docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG || true"

发布临时docker镜像:
  <<: *docker
  stage: 发布
  except:
    - master
  dependencies:
    - 构建
  script:
    - docker build -t $CI_REGISTRY_IMAGE:snapshot .
    - docker push $CI_REGISTRY_IMAGE:snapshot

部署本地环境:
  <<: *docker-compose
  except:
    - master
  variables:
    <<: *docker-compose_variables
    COMPOSE_FILE: docker-compose/snapshot/docker-compose.yml
    DOCKER_HOST: $AUTO_DEVOPS_SNAPSHOT_DOCKER_HOST
  before_script:
    - mkdir -m 700 -p "$HOME/.docker"
    - echo "$AUTO_DEVOPS_SNAPSHOT_DOCKER_CA" > "$HOME/.docker/ca.pem"
    - echo "$AUTO_DEVOPS_SNAPSHOT_DOCKER_CERT" > "$HOME/.docker/cert.pem"
    - echo "$AUTO_DEVOPS_SNAPSHOT_DOCKER_KEY" > "$HOME/.docker/key.pem"
    - export COMPOSE_PROJECT_PORT=$(expr 10000 + $CI_PROJECT_ID)
